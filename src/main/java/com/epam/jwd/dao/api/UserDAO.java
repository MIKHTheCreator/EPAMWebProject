package com.epam.jwd.dao.api;

import com.epam.jwd.dao.entity.AbstractEntity;
import com.epam.jwd.dao.exception.DAOException;

import java.util.List;

/**
 * @param <T> the entity that extends AbstractEntity class {@link AbstractEntity}
 * @param <V> the type of entity id field provided from AbstractEntity class {@link AbstractEntity#id}
 * @author mikh
 * This interface is creted due to DAO Pattern and provide user with CRUD methods and an extra
 * options to find user by client id, update users passport id and find users to page
 */
public interface UserDAO<T extends AbstractEntity<V>, V> {

    /**
     * Save method which provide user with opportunity to save entity to the DataBase
     *
     * @param entity entity to save in DataBase
     * @return the saved entity value with generated by DataBase id
     * @throws DAOException if the connection can't be accepted or save operation
     *                      was failed
     */
    T save(T entity) throws DAOException;

    /**
     * Method which extracts all values from DataBase and put it to the List {@link List}
     *
     * @return list of entities in current DataBase table
     * @throws DAOException if the connection can't be accepted or findAll operation
     *                      was failed
     */
    List<T> findAll() throws DAOException;

    /**
     * Method which extracts entity from DataBase with provided id of type {@link AbstractEntity#id}
     *
     * @param id id of provided type to find entity in DataBase
     * @return entity of current type
     * @throws DAOException if the connection can't be accepted or findById operation
     *                      was failed
     */
    T findById(V id) throws DAOException;

    /**
     * Method which updates some entity fields in DataBase by provided entity
     *
     * @param entity provided entity with updated fields
     * @return updated entity
     * @throws DAOException if the connection can't be accepted or update operation
     *                      was failed
     */
    T update(T entity) throws DAOException;

    /**
     * Method which deletes current entity from Database by provided entity
     *
     * @param entity entity to delete
     * @throws DAOException if the connection can't be accepted or delete operation
     *                      was failed
     */
    void delete(T entity) throws DAOException;

    /**
     * Method which extracts from DataBase entity with provided ClientId {@link com.epam.jwd.dao.entity.user_account.Client#id}
     *
     * @param id client id to find for in DB
     * @return founded entity by provided id
     * @throws DAOException if the connection can't be accepted or findUserByClientId operation
     *                      was failed
     */
    T findUserByClientId(V id) throws DAOException;

    /**
     * Method which updates in DataBase entity with provided PassportId {@link com.epam.jwd.dao.entity.user_account.Passport#id}
     *
     * @param entity updated entity with different passportId
     * @return updated entity with generated id
     * @throws DAOException if the connection can't be accepted or updateUsersPassportId operation
     *                      was failed
     */
    T updateUsersPassportId(T entity) throws DAOException;

    /**
     * Method which extracts List {@link List} of entities from DataBase with set limit
     *
     * @param page           current page number
     * @param numOfPositions max limit of entities on ine page
     * @return List of entities with provided id in amount of numOfPositions argument
     * @throws DAOException if the connection can't be accepted or findUsersToPage operation
     *                      was failed
     */
    List<T> findUsersToPage(int page, int numOfPositions) throws DAOException;
}
